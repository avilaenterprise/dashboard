import streamlit as st
import pandas as pd
import os

ARQ_CONTATOS = "contatos.csv"

def carregar_contatos():
    """
    Carrega a lista de contatos do CSV
    """
    try:
        if os.path.exists(ARQ_CONTATOS):
            df = pd.read_csv(ARQ_CONTATOS, encoding="utf-8")
            df.columns = [c.strip() for c in df.columns]
            return df
        else:
            return pd.DataFrame(columns=["Nome", "N√∫mero", "Email", "Cidade", "Observa√ß√£o"])
    except Exception as e:
        st.error(f"Erro ao carregar contatos: {e}")
        return pd.DataFrame(columns=["Nome", "N√∫mero", "Email", "Cidade", "Observa√ß√£o"])

def salvar_contatos(df):
    """
    Salva a lista de contatos no CSV
    """
    try:
        df.to_csv(ARQ_CONTATOS, index=False, encoding="utf-8")
        return True
    except Exception as e:
        st.error(f"Erro ao salvar contatos: {e}")
        return False

def mostrar_contatos():
    """
    Interface principal do m√≥dulo de contatos
    """
    st.header("üìû Gerenciamento de Contatos")
    
    # Criar abas
    tab1, tab2, tab3 = st.tabs(["Lista de Contatos", "Adicionar Contato", "Importar/Exportar"])
    
    with tab1:
        st.subheader("üìã Lista de Contatos")
        
        # Carregar contatos
        contatos = carregar_contatos()
        
        if not contatos.empty:
            # Filtros
            col1, col2, col3 = st.columns(3)
            with col1:
                busca_nome = st.text_input("üîç Buscar por Nome", placeholder="Digite o nome...")
            with col2:
                if "Cidade" in contatos.columns:
                    cidades = ["Todas"] + sorted(contatos["Cidade"].dropna().unique().tolist())
                    cidade_filtro = st.selectbox("Filtrar por Cidade", cidades)
            with col3:
                mostrar_vazios = st.checkbox("Mostrar campos vazios", value=False)
            
            # Aplicar filtros
            contatos_filtrados = contatos.copy()
            
            if busca_nome:
                contatos_filtrados = contatos_filtrados[
                    contatos_filtrados["Nome"].str.contains(busca_nome, case=False, na=False)
                ]
            
            if cidade_filtro != "Todas":
                contatos_filtrados = contatos_filtrados[contatos_filtrados["Cidade"] == cidade_filtro]
            
            if not mostrar_vazios:
                # Filtrar registros com pelo menos nome e n√∫mero
                contatos_filtrados = contatos_filtrados[
                    (contatos_filtrados["Nome"].notna()) & 
                    (contatos_filtrados["Nome"] != "") &
                    (contatos_filtrados["N√∫mero"].notna()) & 
                    (contatos_filtrados["N√∫mero"] != "")
                ]
            
            # Exibir resultados
            st.metric("Total de Contatos", len(contatos_filtrados))
            
            if not contatos_filtrados.empty:
                # Editor de dados para permitir edi√ß√µes
                contatos_editados = st.data_editor(
                    contatos_filtrados,
                    column_config={
                        "Nome": st.column_config.TextColumn("Nome", width="medium", required=True),
                        "N√∫mero": st.column_config.TextColumn("Telefone", width="medium"),
                        "Email": st.column_config.TextColumn("E-mail", width="medium"),
                        "Cidade": st.column_config.TextColumn("Cidade", width="small"),
                        "Observa√ß√£o": st.column_config.TextColumn("Observa√ß√µes", width="large")
                    },
                    use_container_width=True,
                    num_rows="dynamic",
                    key="editor_contatos"
                )
                
                # Bot√£o para salvar altera√ß√µes
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üíæ Salvar Altera√ß√µes", type="primary"):
                        if salvar_contatos(contatos_editados):
                            st.success("‚úÖ Contatos salvos com sucesso!")
                            st.rerun()
                        else:
                            st.error("‚ùå Erro ao salvar contatos")
                
                with col2:
                    # Download dos contatos filtrados
                    csv = contatos_editados.to_csv(index=False).encode("utf-8")
                    st.download_button(
                        "üì• Baixar Lista (CSV)",
                        csv,
                        "contatos_filtrados.csv",
                        "text/csv"
                    )
                
                # Estat√≠sticas
                st.markdown("### üìä Estat√≠sticas")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    com_email = len(contatos_filtrados[contatos_filtrados["Email"].notna() & (contatos_filtrados["Email"] != "")])
                    st.metric("Com E-mail", com_email)
                
                with col2:
                    com_cidade = len(contatos_filtrados[contatos_filtrados["Cidade"].notna() & (contatos_filtrados["Cidade"] != "")])
                    st.metric("Com Cidade", com_cidade)
                
                with col3:
                    com_obs = len(contatos_filtrados[contatos_filtrados["Observa√ß√£o"].notna() & (contatos_filtrados["Observa√ß√£o"] != "")])
                    st.metric("Com Observa√ß√µes", com_obs)
                
                with col4:
                    completos = len(contatos_filtrados[
                        (contatos_filtrados["Nome"].notna()) & (contatos_filtrados["Nome"] != "") &
                        (contatos_filtrados["N√∫mero"].notna()) & (contatos_filtrados["N√∫mero"] != "") &
                        (contatos_filtrados["Email"].notna()) & (contatos_filtrados["Email"] != "")
                    ])
                    st.metric("Completos", completos)
                
            else:
                st.info("üì≠ Nenhum contato encontrado com os filtros aplicados")
        else:
            st.info("üì≠ Nenhum contato encontrado. Adicione contatos na aba 'Adicionar Contato'")
    
    with tab2:
        st.subheader("‚ûï Adicionar Novo Contato")
        
        with st.form("form_novo_contato"):
            col1, col2 = st.columns(2)
            
            with col1:
                nome = st.text_input("Nome *", placeholder="Nome ou empresa")
                numero = st.text_input("Telefone *", placeholder="(16) 99999-9999")
                email = st.text_input("E-mail", placeholder="contato@empresa.com")
            
            with col2:
                cidade = st.text_input("Cidade", placeholder="Ribeir√£o Preto")
                observacao = st.text_area("Observa√ß√µes", placeholder="Observa√ß√µes importantes...")
            
            submitted = st.form_submit_button("‚ûï Adicionar Contato", use_container_width=True)
            
            if submitted:
                if nome and numero:
                    # Carregar contatos existentes
                    contatos = carregar_contatos()
                    
                    # Criar novo contato
                    novo_contato = {
                        "Nome": nome,
                        "N√∫mero": numero,
                        "Email": email,
                        "Cidade": cidade,
                        "Observa√ß√£o": observacao
                    }
                    
                    # Adicionar √† lista
                    novo_df = pd.DataFrame([novo_contato])
                    contatos_atualizados = pd.concat([contatos, novo_df], ignore_index=True)
                    
                    # Salvar
                    if salvar_contatos(contatos_atualizados):
                        st.success(f"‚úÖ Contato '{nome}' adicionado com sucesso!")
                        st.balloons()
                    else:
                        st.error("‚ùå Erro ao adicionar contato")
                else:
                    st.error("‚ùå Nome e telefone s√£o obrigat√≥rios")
    
    with tab3:
        st.subheader("üì§ Importar / Exportar Contatos")
        
        # Exportar
        st.markdown("### üì• Exportar Contatos")
        contatos = carregar_contatos()
        
        if not contatos.empty:
            col1, col2 = st.columns(2)
            
            with col1:
                # CSV completo
                csv_completo = contatos.to_csv(index=False).encode("utf-8")
                st.download_button(
                    "üìä Baixar Todos (CSV)",
                    csv_completo,
                    "contatos_completos.csv",
                    "text/csv",
                    use_container_width=True
                )
            
            with col2:
                # Apenas contatos completos
                contatos_completos = contatos[
                    (contatos["Nome"].notna()) & (contatos["Nome"] != "") &
                    (contatos["N√∫mero"].notna()) & (contatos["N√∫mero"] != "") &
                    (contatos["Email"].notna()) & (contatos["Email"] != "")
                ]
                if not contatos_completos.empty:
                    csv_completos = contatos_completos.to_csv(index=False).encode("utf-8")
                    st.download_button(
                        "‚úÖ Baixar Completos (CSV)",
                        csv_completos,
                        "contatos_completos.csv",
                        "text/csv",
                        use_container_width=True
                    )
        
        # Importar
        st.markdown("### üì§ Importar Contatos")
        uploaded_file = st.file_uploader(
            "üìÅ Selecione arquivo CSV para importar",
            type=['csv'],
            help="O arquivo deve conter as colunas: Nome, N√∫mero, Email, Cidade, Observa√ß√£o"
        )
        
        if uploaded_file is not None:
            try:
                # Ler arquivo
                df_importado = pd.read_csv(uploaded_file)
                
                st.success(f"‚úÖ Arquivo lido: {len(df_importado)} registros encontrados")
                st.subheader("üëÄ Preview dos Dados")
                st.dataframe(df_importado.head(10), use_container_width=True)
                
                # Validar colunas
                colunas_esperadas = ["Nome", "N√∫mero", "Email", "Cidade", "Observa√ß√£o"]
                colunas_arquivo = df_importado.columns.tolist()
                
                st.markdown("### üîç Mapeamento de Colunas")
                mapeamento = {}
                for col_esperada in colunas_esperadas:
                    opcoes = ["-- N√£o mapear --"] + colunas_arquivo
                    col_selecionada = st.selectbox(
                        f"Mapear '{col_esperada}' para:",
                        opcoes,
                        index=opcoes.index(col_esperada) if col_esperada in opcoes else 0
                    )
                    if col_selecionada != "-- N√£o mapear --":
                        mapeamento[col_esperada] = col_selecionada
                
                # Op√ß√µes de importa√ß√£o
                col1, col2 = st.columns(2)
                with col1:
                    sobrescrever = st.checkbox("Sobrescrever arquivo atual", value=False)
                with col2:
                    apenas_novos = st.checkbox("Apenas registros novos", value=True)
                
                # Bot√£o de importa√ß√£o
                if st.button("üì• Importar Contatos", type="primary"):
                    try:
                        # Aplicar mapeamento
                        df_mapeado = pd.DataFrame()
                        for col_destino, col_origem in mapeamento.items():
                            if col_origem in df_importado.columns:
                                df_mapeado[col_destino] = df_importado[col_origem]
                            else:
                                df_mapeado[col_destino] = ""
                        
                        # Preencher colunas faltantes
                        for col in colunas_esperadas:
                            if col not in df_mapeado.columns:
                                df_mapeado[col] = ""
                        
                        # Carregar contatos existentes
                        if sobrescrever:
                            contatos_final = df_mapeado
                        else:
                            contatos_existentes = carregar_contatos()
                            if apenas_novos and not contatos_existentes.empty:
                                # Filtrar duplicados por Nome+N√∫mero
                                chaves_existentes = contatos_existentes["Nome"] + "|" + contatos_existentes["N√∫mero"]
                                chaves_novas = df_mapeado["Nome"] + "|" + df_mapeado["N√∫mero"]
                                df_novos = df_mapeado[~chaves_novas.isin(chaves_existentes)]
                                contatos_final = pd.concat([contatos_existentes, df_novos], ignore_index=True)
                            else:
                                contatos_final = pd.concat([contatos_existentes, df_mapeado], ignore_index=True)
                        
                        # Salvar
                        if salvar_contatos(contatos_final):
                            novos_importados = len(contatos_final) - len(carregar_contatos()) if not sobrescrever else len(df_mapeado)
                            st.success(f"‚úÖ Importa√ß√£o conclu√≠da! {novos_importados} contatos adicionados.")
                            st.balloons()
                        else:
                            st.error("‚ùå Erro ao salvar contatos importados")
                    
                    except Exception as e:
                        st.error(f"‚ùå Erro durante a importa√ß√£o: {str(e)}")
            
            except Exception as e:
                st.error(f"‚ùå Erro ao ler arquivo: {str(e)}")
        
        # Informa√ß√µes de formato
        with st.expander("‚ÑπÔ∏è Formato do Arquivo CSV"):
            st.markdown("""
            ### üìã Formato Esperado:
            ```
            Nome,N√∫mero,Email,Cidade,Observa√ß√£o
            Jo√£o Silva,16999999999,joao@email.com,Ribeir√£o Preto,Cliente importante
            Empresa XYZ,1133334444,contato@xyz.com,S√£o Paulo,Fornecedor
            ```
            
            ### ‚úÖ Dicas:
            - Use v√≠rgula (,) como separador
            - Nome e N√∫mero s√£o obrigat√≥rios
            - Outros campos s√£o opcionais
            - Encode em UTF-8 para caracteres especiais
            """)
